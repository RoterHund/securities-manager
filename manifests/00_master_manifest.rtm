CALL_METHOD
    # resim faucet address
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_FUNCTION
    Address("${package}")
    "SecuritiesManager"
    "instantiate_securities_manager"
;
CALL_METHOD
    Address("${account}")
    "deposit_batch"
    Expression("ENTIRE_WORKTOP")
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create proof of holding the security manager owner badge to mint the Issuer Badge
    Address("${account}")
    "create_proof_of_amount"
    Address("${security_manager_owner_badge}")
    Decimal("1")
;
MINT_NON_FUNGIBLE
    # Mint Issuer Badge passing in the Legal Entity Identifier (LEI) of the issuer and integer for the badge id
    Address("${issuer_badge}")
    Map<NonFungibleLocalId, Tuple>(
        NonFungibleLocalId("#1#") => Tuple(
            Tuple(
                "LEI_ISSUER12345",
            )
        )
    )
;
CALL_METHOD
    # Deposit in Issuer Account or Security Manager Account
    # If deposited to Security Manager Account, manifest 02b_transfer_issuer_badge.rtm can be used to transfer to Issuer Account
    Address("${issuer_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
# Transfer Issuer Badge from Security Manager Account to Issuer Account
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Requires proof of Security Manager Badge due to Restricted Withdrawal
    Address("${account}")
    "create_proof_of_amount"
    Address("${security_manager_owner_badge}")
    Decimal("1")
;
CALL_METHOD
    # Withdraw Issuer Badge from Security Manager Account
    Address("${account}")
    "withdraw_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Deposit in Issuer Account
    Address("${issuer_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge to call protected  method mint_issuer_agent_badge
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Create Proof of Issuer Badge to pass into mint_issuer_agent_badge method
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
POP_FROM_AUTH_ZONE
    # Pop from Auth Zone to pass into mint_issuer_agent_badge method
    Proof("issuer_proof")
;
CALL_METHOD
    # Mint Issuer Agent Badge passing in the Agent LEI & Local ID to be minted
    Address("${component}")
    "issuer_mint_agent_badge"
    Proof("issuer_proof")
    "LEI_AGENT12345"
    1u64
;
CALL_METHOD
    # Deposit in Issuer Agent Account or Issuer Account
    # If deposited to Issuer Account, manifest 03b_transfer_issuer_badge.rtm should be used to transfer to Issuer Agent Account
    Address("${agent_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
MINT_NON_FUNGIBLE
    # Mint Issuer Agent Badge passing in the Issuer Badge Address & Local ID
    Address("${agent_badge}")
    Map<NonFungibleLocalId, Tuple>(
        NonFungibleLocalId("#2#") => Tuple(
            Tuple(
                Address("${issuer_badge}"),
                NonFungibleLocalId("#1#"),
                "LEI_AGENT2",
            )
        )
    )
;
CALL_METHOD
    # Deposit in Issuer Agent Account or Issuer Account
    # If deposit to Issuer Account, manifest 03b_transfer_issuer_badge.rtm should be used to transfer to Issuer Agent Account
    Address("${agent_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
# Transfer Issuer Badge from Security Manager Account to Issuer Account
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge due to Restricted Withdrawal
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Withdraw Issuer Agent Badge from Issuer Account
    Address("${issuer_account}")
    "withdraw_non_fungibles"
    Address("${agent_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Deposit in Issuer Agent Account
    Address("${agent_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge to call protected method create_bond_instrument
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Create Proof of Issuer Badge to pass into the create_bond_instrument method
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
POP_FROM_AUTH_ZONE
    # Pop from Auth Zone to pass into create_bond_instrument method
    Proof("issuer_proof")
;
CALL_METHOD
    # Pass in proof along with the security_type, security_form, name
    # & string to set on the metadata
    Address("${component}")
    "issuer_create_instrument"
    Proof("issuer_proof")
    "Bond"
    "Bearer"
    "Bond1"
    "BON1"
;
CALL_METHOD
    # displays all instruments currently set up
    Address("${component}")
    "get_instruments"
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge to call protected method create_bond_instrument
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Create Proof of Issuer Badge to pass into create_bond_instrument method
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
POP_FROM_AUTH_ZONE
    # Pop from Auth Zone to pass into create_bond_instrument method
    Proof("issuer_proof")
;
CALL_METHOD
    # Pass in the Proof and the metadata key & value to tbe updated 
    Address("${component}")
    "issuer_update_instrument_metadata"
    Proof("issuer_proof")
    Address("${bond_instrument}")
    "status"
    "verified"
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge to call protected method create_bond_instrument
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Create Proof of Issuer Badge to pass into create_bond_instrument method
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
POP_FROM_AUTH_ZONE
    # Pop from Auth Zone to pass into create_bond_instrument method
    Proof("issuer_proof")
;
CALL_METHOD
    # Pass in the Proof, the instrument address and the SFTR metadata key & value to be updated
    # Note this transaction is rejected as the issuer is not permissioned to change SFTR fields 
    Address("${component}")
    "issuer_update_instrument_metadata"
    Proof("issuer_proof")
    Address("${bond_instrument}")
    "sftr_security_type"
    "RMBS"
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge to call protected method issuer_open_subscription
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Sets the subscription_status metadata field to open on the bond nft instrument
    Address("${component}")
    "issuer_open_subscription"
    Address("${bond_instrument}")
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # investor passes in the country and the integer id of the NFT to be minted
    Address("${component}")
    "investor_check_kyc"
    "Germany"
    1u64
;
CALL_METHOD
    Address("${investor_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Investor Badge to call protected method investor_subscribe
    Address("${investor_account}")
    "create_proof_of_non_fungibles"
    Address("${investor_kyc_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Investor passes in the bond nft instrument addess and amount to be subscribed
    Address("${component}")
    "investor_subscribe"
    Address("${bond_instrument}")
    Decimal("100")
;
CALL_METHOD
    # Investor receives a Subscription NFT in return
    Address("${investor_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Investor Badge to call the protected method investor_transfer_payment
    Address("${investor_account}")
    "create_proof_of_non_fungibles"
    Address("${investor_kyc_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Withdraws the payment amount
    Address("${investor_account}")
    "withdraw"
    Address("${xrd}")
    Decimal("1000")
;
TAKE_FROM_WORKTOP
    Address("${xrd}")
    Decimal("1000")
    Bucket("payment_bucket")
;
CALL_METHOD
    # Create Proof of Subscription NFT to pass into the investor_transfer_payment method
    Address("${investor_account}")
    "create_proof_of_non_fungibles"
    Address("${investor_subscription_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
POP_FROM_AUTH_ZONE
    # Pop from Auth Zone to pass into investor_transfer_payment method
    Proof("subscription_proof")
;
CALL_METHOD
    # Pass in the proof along with the payment bucket
    Address("${component}")
    "investor_transfer_payment"
    Proof("subscription_proof")
    Bucket("payment_bucket")
;
CALL_METHOD
    # Receives a refund if the payment amount transferred is too large
    Address("${investor_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Investor Badge to call the protected method investor_cancel_payment
    Address("${investor_account}")
    "create_proof_of_non_fungibles"
    Address("${investor_kyc_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Withdraws the subscription NFT to be passed into the investor_cancel_payment method
    Address("${investor_account}")
    "withdraw_non_fungibles"
    Address("${investor_subscription_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
TAKE_NON_FUNGIBLES_FROM_WORKTOP
    Address("${investor_subscription_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
    Bucket("subscription_bucket")
;

CALL_METHOD
    # Pass in the subscription NFT
    Address("${component}")
    "investor_cancel_payment"
    Bucket("subscription_bucket")
;
CALL_METHOD
    # Receive the subscription NFT back & the XRD Refund
    Address("${investor_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # utility to return all instruments in the instrument manager
    Address("component_sim1cpwu4wc6rg0am8l9prnh2lzqkk6hue6stzqhdx48rzvek2mmm5vp0p")
    "get_instruments"
;
CALL_METHOD
    Address("account_sim1c9yeaya6pehau0fn7vgavuggeev64gahsh05dauae2uu25njk224xz")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge to call protected method issuer_close_subscription
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Sets the subscription_status metadata field to close on the bond nft instrument
    Address("${component}")
    "issuer_close_subscription"
    Address("${bond_instrument}")
;
CALL_METHOD
    Address("${component}")
    "get_instruments"
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Agent Badge to call protected method create_instrument_lifecycle
    Address("${agent_account}")
    "create_proof_of_non_fungibles"
    Address("${agent_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Passes in the bond instrument, the corporate action type
    # and the percent to apply to the security holdings
    Address("${component}")
    "agent_add_instrument_lifecycle"
    Address("${bond_instrument}")
    "Issuance"
    Decimal("100")
;CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Agent Badge to call protected method agent_issue_lifecycle_securities
    Address("${agent_account}")
    "create_proof_of_non_fungibles"
    Address("${agent_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    Address("${component}")
    "agent_issue_lifecycle_securities"
    Address("${bond_instrument}")
;CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Investor Badge to call the protected method investor_claim_security
    Address("${investor_account}")
    "create_proof_of_non_fungibles"
    Address("${investor_kyc_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Withdraw the subscription nft to pass to the investor_claim_security method
    Address("${investor_account}")
    "withdraw_non_fungibles"
    Address("${investor_subscription_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
TAKE_NON_FUNGIBLES_FROM_WORKTOP
    Address("${investor_subscription_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
    Bucket("subscription_bucket")
;
CALL_METHOD
    Address("${component}")
    "investor_claim_security"
    Bucket("subscription_bucket")
;
CALL_METHOD
    Address("${investor_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Badge to call the protected method issuer_claim_cash
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    Address("${component}")
    "issuer_claim_cash"
    Address("${bond_instrument}")
;
CALL_METHOD
    Address("${issuer_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Agent Badge to call protected method agent_add_instrument_lifecycle
    Address("${agent_account}")
    "create_proof_of_non_fungibles"
    Address("${agent_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Passes in the bond instrument, the corporate action type
    # and the percent to apply to the security holdings
    Address("${component}")
    "agent_add_instrument_lifecycle"
    Address("${bond_instrument}")
    "Coupon"
    Decimal("5")
;
CALL_METHOD
    Address("${component}")
    "agent_add_instrument_lifecycle"
    Address("${bond_instrument}")
    "Coupon"
    Decimal("5")
;CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Issuer Agent Badge to call protected method create_instrument_lifecycle
    Address("${agent_account}")
    "create_proof_of_non_fungibles"
    Address("${agent_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    Address("${component}")
    "agent_issue_lifecycle_securities"
    Address("${bond_instrument}")
;CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    Address("${issuer_account}")
    "create_proof_of_non_fungibles"
    Address("${issuer_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    Address("${issuer_account}")
    "withdraw"
    Address("${xrd}")
    Decimal("1000")
;
TAKE_FROM_WORKTOP
    Address("${xrd}")
    Decimal("1000")
    Bucket("cash_bucket")
;
CALL_METHOD
    # Pass in the cash bucket
    Address("${component}")
    "issuer_deposit_funds"
    Bucket("cash_bucket")
;
# CALL_METHOD
#     Address("${issuer_account}")
#     "try_deposit_batch_or_refund"
#     Expression("ENTIRE_WORKTOP")
#     Enum<0u8>()
# ;CALL_METHOD
    Address("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")
    "lock_fee"
    Decimal("5000")
;
CALL_METHOD
    # Create Proof of Investor Badge to call the protected method investor_claim_corporate_action
    Address("${investor_account}")
    "create_proof_of_non_fungibles"
    Address("${investor_kyc_badge}")
    Array<NonFungibleLocalId>(
        NonFungibleLocalId("#1#")
    )
;
CALL_METHOD
    # Withdraw an amount of the current version of the securities
    Address("${investor_account}")
    "withdraw"
    Address("${bond_security_v1}")
    Decimal("100")
;
TAKE_FROM_WORKTOP
    Address("${bond_security_v1}")
    Decimal("100")
    Bucket("security_bucket")
;
CALL_METHOD
    Address("${component}")
    "investor_claim_corporate_action"
    Bucket("security_bucket")
;
CALL_METHOD
    # Receives coupon payment and new securities version
    Address("${investor_account}")
    "try_deposit_batch_or_refund"
    Expression("ENTIRE_WORKTOP")
    Enum<0u8>()
;
